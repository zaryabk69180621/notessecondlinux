so redux will help us with state management of our react app
redux is used for state management
now i could be very difficult as a alot of boilerplate may be required
so we instead use
reduxtoolkit
now this edux-toolkit is spearate package and to use it in react we use 
reactredux
which is the primarily used binfning method for binding a redux toolkit to the react app

THRE CORE CNCEPts:

lets assume a cake shop
here are the entities involved
->SHOP itself
-> shop keeper
->customer
assume taht you are the customer one day you got the shop with an intention o by cake
you le the shopkeeper know hat you want a cake 
you dont jump the shelkf and grab the cake
instead you request and the shop keeper who checks for availibilyu and packs it and gen reciept and mark teh sale 
so ina a nutshell

FIRST COncept
cakeshop scinaroi    |redux|        purpose
shop                 |store|        hold state of your application
intention to biycake |Action|       describe what happended
(reduce cakes by 1)

shopkeeper	     |reducer|	    



*************************************so how do these concepts get implimwnted in code this is where three components come into the picture******************************************

FIRST PRICIPLE: we are supposed to manage all of our state in a single store/object managed by redux like the cake shop if state is niumberof cake
then:
{
cakeCount:10;
}// is our store

SECOND PRINCIPLE: the only way to change a state is to emit an action which is an object , that describes what happened, not allowed to directly update
for example we are ot allowed to directly decrease the number of cakes like by taking cake on our own
{
type:BUY_CAKE
}
THIRD PRINCIPLE: to specify how the state tree is transformed by actions you write pure reducer
reducer=(prev,action)=>{return newState}
in cakeShop example it is :
const reducer=(state,action)=>{
if(action.type==BUY_Cake){
return {state.cakeCount:state.cakeCount-1}}

our JS app has subbed to the store which containes all of our states in an apbjevct to update a state it cant directly do it instead it has to dispatch an action 
as a result of which the reducer updates teh state







***********************************************************************************ACTIONS***************************************************************************************************
so actions are the only way your application can communicate with your store
actionsa re plain js objects
they must also have a type prooerty 
that is usuallly a string contant
so now lets just create an action
to sepcify a type, by conevntion we need to create a string to avoid typos
like let buy_cake= "but_cake"

{
type:buy_cake,
info:"we need"}
it can also contain other attributes apart from type like indo as added above;

-------------------------------------------------------------------------------------------------ACTION CREATER------------------------------------------------------------------------------
an action creator is a function that returns this action
function buy_cake(){
return {
type:buy_cake,
info:"we need cake"};

****************************************************************************************REDUCER**********************************************************************************************
a reducer tells you how a state changes in a store an action only requires a state tp be changed by telling what happpened but the reduicer is actually responsible for changing teh state of the store;


let initialstate={

numberofcakes:10
}

function(prevstate=initialstate,action){
switch(action.type){
case "buy_cake":
return {...state,numberOfCakes:state.umberofCakes-1}
break;
default:
return state
allo
}


*************************************************************************************STORE***************************************************************************************************
so the action stpre has following properties
-> it holds all of the states of our app
-> it provides the getstate method which allows the states to be accessed
-> it also provides the dispatch method which takes in the action argument and passes it to the reducer to 
-> it provides asubcribe method that takes in as an argument, a function that gets aexuted evry time a state changes
-> you can UNSUB to changes on  states by calling the function you get in return when the sub was called.
-----------------------------------------------------------------------this is where we use redux library------------------------------------------------------------------------------------
const redux= require("redux");




